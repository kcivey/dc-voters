#!/usr/bin/env node

const assert = require('assert');
const fs = require('fs');
const csvParse = require('csv-parse');
const yargs = require('yargs');
const db = require('../lib/db/admin');
const argv = getArgv();

main()
    .catch(function (err) {
        console.error(err);
        process.exit(64);
    })
    .finally(() => db.close());

async function main() {
    const project = await db.getProjectByCode(argv.project);
    const circulatorIdByName = await getCirculators(project.id);
    const infile = argv.file;
    assert(infile, 'Input file required');
    const parser = fs.createReadStream(infile)
        .pipe(csvParse({columns: true}));
    for await (const r of parser) {
        const pageNumber = +r.Page;
        const circulatorName = r.Circulator;
        console.warn([pageNumber, circulatorName]);
        let circulatorId = circulatorIdByName[circulatorName];
        if (!circulatorId) {
            const circulator = await db.createOrUpdateCirculator(project.id, null, {name: circulatorName});
            console.warn(circulator);
            circulatorId = circulator.id;
            circulatorIdByName[circulatorName] = circulatorId;
        }
        const page = await db.getPage(project.id, pageNumber);
        assert(page, `Page ${pageNumber} not found`);
        await db.createOrUpdatePage({project, id: page.id, data: {circulator_id: circulatorId}, number: pageNumber});
    }
}

async function getCirculators(projectId) {
    const circulatorIdByName = {};
    for (const c of await db.getCirculatorsForProject(projectId)) {
        circulatorIdByName[c.name] = c.id;
    }
    return circulatorIdByName;
}

function getArgv() {
    return yargs
        .options({
            project: {
                type: 'string',
                describe: 'code for project',
                required: true,
            },
        })
        .usage('$0 <file>', 'import circulators from CSV file', function (yargs) {
            yargs.positional('file', {
                type: 'string',
                describe: 'CSV file',
            });
        })
        .check(function (argv) {
            assert.strictEqual(argv._.length, 0, 'Unexpected arguments after filename');
            return true;
        })
        .strict(true)
        .argv;
}
